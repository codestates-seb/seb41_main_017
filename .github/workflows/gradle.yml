# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "BE" ]
  pull_request:
    branches: [ "BE" ]

permissions:
  contents: read
env:
  S3_BUCKET_NAME: culinari
  APPLICATION: ${{ secrets.APPLICATION}}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    ## gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
      
    ## create application-dev.properties
    - name: make application-dev.properties
      if: contains(github.ref, 'BE')
      run: |
        cd ./server/culinari/src/main/resources
        touch ./application-dev.properties
        echo "${{ secrets.APPLICATION }}" > ./application-dev.properties
      shell: bash

    ## create application-prod.properties
    - name: make application-prod.properties
      if: contains(github.ref, 'BE')
      run: |
          cd ./server/culinari/src/main/resources
          touch ./application-prod.properties
          echo "${{ secrets.APPLICATION}}" > ./application-prod.properties
      shell: bash
  

      
    - name: Add permission
      run: chmod +x ./gradlew
      working-directory: ./server/culinari
      

#     - name: Set Yaml
#       uses: microsoft/variable-substitution@v3 
#       with:
#         files: ${{ env.RESOURCE_PATH }}
#       env:
#         spring.datasource.url: ${{ secrets.MYSQL_URL}}
#         spring.datasource.id: ${{ secrets.MYSQL_ID}}
#         spring.datasource.password: ${{ secrets.MYSQL_PWD }}
#         jwt.secret-key: ${{ secrets.JWT_SECRET_KEY}}
#         cloud.aws.credentials.access-key: ${{ secrets.AWS_ACCESS_KEY }}
#         cloud.aws.credentials.secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
      
    - name: Build with Gradle
      run: ./gradlew build --exclude-task test
      working-directory: ./server/culinari/

#     - name: Build with Gradle
#       uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
#       with:
#         arguments: build
        
         # build한 후 프로젝트를 압축합니다.
    - name: Make zip file
      run: zip -r ./culinari-deploy.zip .
      shell: bash
      
         # Access Key와 Secret Access Key를 통해 권한을 확인합니다.
    # 아래 코드에 Access Key와 Secret Key를 직접 작성하지 않습니다.
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
        aws-region: ap-northeast-2
    
    # 압축한 프로젝트를 S3로 전송합니다.
    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./culinari-deploy.zip s3://culinari/culinari-deploy.zip
      
        
